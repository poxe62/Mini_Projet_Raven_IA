; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	D:\cours\UQAC\Intelligence artificielle - jeux vidéos\Buckland_AISource\Common\fuzzy\FuzzyOperators.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??1FuzzyTerm@@UAE@XZ				; FuzzyTerm::~FuzzyTerm
PUBLIC	??0FuzzyTerm@@QAE@XZ				; FuzzyTerm::FuzzyTerm
PUBLIC	??_GFuzzyTerm@@UAEPAXI@Z			; FuzzyTerm::`scalar deleting destructor'
PUBLIC	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
PUBLIC	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@ABV01@@Z	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
PUBLIC	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate
PUBLIC	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate
PUBLIC	?max_size@?$allocator@PAVFuzzyTerm@@@std@@QBEIXZ ; std::allocator<FuzzyTerm *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::allocator_traits<std::allocator<FuzzyTerm *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::_Wrap_alloc<std::allocator<FuzzyTerm *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::~_Vector_val<std::_Simple_types<FuzzyTerm *> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>
PUBLIC	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
PUBLIC	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Unused_capacity
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
PUBLIC	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
PUBLIC	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBE_NPBQAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
PUBLIC	??1FzAND@@UAE@XZ				; FzAND::~FzAND
PUBLIC	??0FzAND@@QAE@ABV0@@Z				; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@0@Z			; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@00@Z		; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@000@Z		; FzAND::FzAND
PUBLIC	?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ		; FzAND::Clone
PUBLIC	?GetDOM@FzAND@@UBENXZ				; FzAND::GetDOM
PUBLIC	?ClearDOM@FzAND@@UAEXXZ				; FzAND::ClearDOM
PUBLIC	?ORwithDOM@FzAND@@UAEXN@Z			; FzAND::ORwithDOM
PUBLIC	??_GFzAND@@UAEPAXI@Z				; FzAND::`scalar deleting destructor'
PUBLIC	??1FzOR@@UAE@XZ					; FzOR::~FzOR
PUBLIC	??0FzOR@@QAE@ABV0@@Z				; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@0@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@00@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@000@Z		; FzOR::FzOR
PUBLIC	?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ		; FzOR::Clone
PUBLIC	?GetDOM@FzOR@@UBENXZ				; FzOR::GetDOM
PUBLIC	?ClearDOM@FzOR@@UAEXXZ				; FzOR::ClearDOM
PUBLIC	?ORwithDOM@FzOR@@UAEXN@Z			; FzOR::ORwithDOM
PUBLIC	??_GFzOR@@UAEPAXI@Z				; FzOR::`scalar deleting destructor'
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>
PUBLIC	??4?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::operator=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z ; std::addressof<FuzzyTerm *>
PUBLIC	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
PUBLIC	??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$?0ABV?$allocator@PAVFuzzyTerm@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><std::allocator<FuzzyTerm *> const &>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
PUBLIC	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Umove@PAPAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEPAPAVFuzzyTerm@@PAPAV2@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove<FuzzyTerm * *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
PUBLIC	??$_Deallocate@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@I@Z ; std::_Deallocate<FuzzyTerm *>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@_N@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Deallocate@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@I@Z ; std::_Deallocate<std::_Container_proxy>
PUBLIC	??$_Allocate@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@IPAPAV1@_N@Z ; std::_Allocate<FuzzyTerm *>
PUBLIC	??$_Addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ; std::_Addressof<FuzzyTerm *>
PUBLIC	??$construct@PAVFuzzyTerm@@PAV1@@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@PAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$forward@ABV?$allocator@PAVFuzzyTerm@@@std@@@std@@YAABV?$allocator@PAVFuzzyTerm@@@0@ABV10@@Z ; std::forward<std::allocator<FuzzyTerm *> const &>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
PUBLIC	??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z ; std::_Ptr_cat<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
PUBLIC	??$construct@PAVFuzzyTerm@@PAV1@@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ; std::allocator<FuzzyTerm *>::construct<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
PUBLIC	??$_Uninit_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Uninit_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
PUBLIC	??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??$_Val_type@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Val_type<FuzzyTerm * *>
PUBLIC	??$_Uninit_move@PAVFuzzyTerm@@PAV1@PAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FuzzyTerm *,FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$_Debug_range_ptr@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WI@Z ; std::_Debug_range_ptr<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??$_Iter_cat@PAPAVFuzzyTerm@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFuzzyTerm@@@Z ; std::_Iter_cat<FuzzyTerm * *>
PUBLIC	??$_Debug_range_ptr2@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range_ptr2<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z ; std::_Debug_pointer<FuzzyTerm *>
PUBLIC	??_C@_1GI@DDIAPGKN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_7FuzzyTerm@@6B@				; FuzzyTerm::`vftable'
PUBLIC	??_7FzAND@@6B@					; FzAND::`vftable'
PUBLIC	??_7FzOR@@6B@					; FzOR::`vftable'
PUBLIC	??_C@_1MM@HJBMKOFH@?$AAd?$AA?3?$AA?2?$AAc?$AAo?$AAu?$AAr?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA?2?$AAi?$AAn?$AAt?$AAe?$AAl?$AAl?$AAi?$AAg?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAa?$AAr?$AAt?$AAi?$AAf@ ; `string'
PUBLIC	??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ ; `string'
PUBLIC	??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CG@FHBDFCGK@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5sizeof?5@ ; `string'
PUBLIC	??_C@_1FK@EJGLHMGC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf@ ; `string'
PUBLIC	??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@ ; `string'
PUBLIC	??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@ ; `string'
PUBLIC	??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@ ; `string'
PUBLIC	??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@ ; `string'
PUBLIC	??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@ ; `string'
PUBLIC	??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@ ; `string'
PUBLIC	??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@ ; `string'
PUBLIC	??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@ ; `string'
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GG@BIHJGGHN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ ; `string'
PUBLIC	??_R4FuzzyTerm@@6B@				; FuzzyTerm::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFuzzyTerm@@@8				; FuzzyTerm `RTTI Type Descriptor'
PUBLIC	??_R3FuzzyTerm@@8				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FuzzyTerm@@8				; FuzzyTerm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FuzzyTerm@@8			; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzAND@@6B@					; FzAND::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzAND@@@8				; FzAND `RTTI Type Descriptor'
PUBLIC	??_R3FzAND@@8					; FzAND::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzAND@@8					; FzAND::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzAND@@8				; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzOR@@6B@					; FzOR::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzOR@@@8				; FzOR `RTTI Type Descriptor'
PUBLIC	??_R3FzOR@@8					; FzOR::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzOR@@8					; FzOR::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzOR@@8				; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3810000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_memmove:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__wassert:PROC
EXTRN	??_EFuzzyTerm@@UAEPAXI@Z:PROC			; FuzzyTerm::`vector deleting destructor'
EXTRN	??_EFzAND@@UAEPAXI@Z:PROC			; FzAND::`vector deleting destructor'
EXTRN	??_EFzOR@@UAEPAXI@Z:PROC			; FzOR::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3810000000000000
CONST	SEGMENT
__real@3810000000000000 DQ 03810000000000000r	; 1.17549e-38
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@FzOR@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzOR@@8 DD FLAT:??_R0?AVFzOR@@@8		; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R2FzOR@@8
rdata$r	SEGMENT
??_R2FzOR@@8 DD	FLAT:??_R1A@?0A@EA@FzOR@@8		; FzOR::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzOR@@8
rdata$r	SEGMENT
??_R3FzOR@@8 DD	00H					; FzOR::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzOR@@@8
data$r	SEGMENT
??_R0?AVFzOR@@@8 DD FLAT:??_7type_info@@6B@		; FzOR `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzOR@@', 00H
data$r	ENDS
;	COMDAT ??_R4FzOR@@6B@
rdata$r	SEGMENT
??_R4FzOR@@6B@ DD 00H					; FzOR::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzOR@@@8
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FzAND@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzAND@@8 DD FLAT:??_R0?AVFzAND@@@8	; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R2FzAND@@8
rdata$r	SEGMENT
??_R2FzAND@@8 DD FLAT:??_R1A@?0A@EA@FzAND@@8		; FzAND::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzAND@@8
rdata$r	SEGMENT
??_R3FzAND@@8 DD 00H					; FzAND::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzAND@@@8
data$r	SEGMENT
??_R0?AVFzAND@@@8 DD FLAT:??_7type_info@@6B@		; FzAND `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzAND@@', 00H
data$r	ENDS
;	COMDAT ??_R4FzAND@@6B@
rdata$r	SEGMENT
??_R4FzAND@@6B@ DD 00H					; FzAND::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzAND@@@8
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FuzzyTerm@@8 DD FLAT:??_R0?AVFuzzyTerm@@@8 ; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R2FuzzyTerm@@8
rdata$r	SEGMENT
??_R2FuzzyTerm@@8 DD FLAT:??_R1A@?0A@EA@FuzzyTerm@@8	; FuzzyTerm::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FuzzyTerm@@8
rdata$r	SEGMENT
??_R3FuzzyTerm@@8 DD 00H				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFuzzyTerm@@@8
data$r	SEGMENT
??_R0?AVFuzzyTerm@@@8 DD FLAT:??_7type_info@@6B@	; FuzzyTerm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFuzzyTerm@@', 00H
data$r	ENDS
;	COMDAT ??_R4FuzzyTerm@@6B@
rdata$r	SEGMENT
??_R4FuzzyTerm@@6B@ DD 00H				; FuzzyTerm::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFuzzyTerm@@@8
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_C@_1GG@BIHJGGHN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
CONST	SEGMENT
??_C@_1GG@BIHJGGHN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'V', 00H
	DB	'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@ DB '_Ptr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@
CONST	SEGMENT
??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '-', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'N', 00H
	DB	'O', 00H, 'N', 00H, '_', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, '"', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@
CONST	SEGMENT
??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@ DB '_Ptr_u'
	DB	'ser - _Ptr_container <= _NON_USER_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@ DB '"'
	DB	00H, '2', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'v', 00H, 'o'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, '*', 00H, ')', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r'
	DB	00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'-', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@
CONST	SEGMENT
??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@ DB '2'
	DB	' * sizeof(void *) <= _Ptr_user - _Ptr_container', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@
CONST	SEGMENT
??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@ DB '_Ptr_containe'
	DB	'r < _Ptr_user', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@
CONST	SEGMENT
??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@ DB '"'
	DB	00H, 'r', 00H, 'e', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 't', 00H, '_', 00H, 'c'
	DB	00H, 'a', 00H, 's', 00H, 't', 00H, '<', 00H, 'u', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'p', 00H, 't', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, '(', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, '_', 00H, 'p', 00H, 't', 00H, 'r', 00H, ')'
	DB	00H, '[', 00H, '-', 00H, '1', 00H, ']', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'G', 00H, '_'
	DB	00H, 'A', 00H, 'L', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'A', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'N', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'E', 00H, 'L', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@
CONST	SEGMENT
??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@ DB 'rei'
	DB	'nterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_S'
	DB	'ENTINEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@
CONST	SEGMENT
??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@ DB '"'
	DB	00H, '(', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H
	DB	'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '&', 00H, ' '
	DB	00H, '(', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'G', 00H, '_', 00H
	DB	'A', 00H, 'L', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'A', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, '_', 00H, 'A', 00H, 'L', 00H
	DB	'I', 00H, 'G', 00H, 'N', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, '1', 00H, ')', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@
CONST	SEGMENT
??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@ DB '(_Ptr'
	DB	'_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
CONST	SEGMENT
??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'V', 00H
	DB	'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@EJGLHMGC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf@
CONST	SEGMENT
??_C@_1FK@EJGLHMGC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf@ DB '"'
	DB	00H, '_', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H
	DB	'-', 00H, '1', 00H, ')', 00H, ' ', 00H, '/', 00H, ' ', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, ' ', 00H
	DB	'(', 00H, '_', 00H, 'T', 00H, 'y', 00H, ')', 00H, '"', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FHBDFCGK@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5sizeof?5@
CONST	SEGMENT
??_C@_0CG@FHBDFCGK@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5sizeof?5@ DB '_'
	DB	'Count <= (size_t)(-1) / sizeof (_Ty)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'+', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
CONST	SEGMENT
??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'V', 00H
	DB	'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'O'
	DB	00H, 'R', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'D', 00H
	DB	'O', 00H, 'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'D', 00H, 'O', 00H
	DB	'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@HJBMKOFH@?$AAd?$AA?3?$AA?2?$AAc?$AAo?$AAu?$AAr?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA?2?$AAi?$AAn?$AAt?$AAe?$AAl?$AAl?$AAi?$AAg?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAa?$AAr?$AAt?$AAi?$AAf@
CONST	SEGMENT
??_C@_1MM@HJBMKOFH@?$AAd?$AA?3?$AA?2?$AAc?$AAo?$AAu?$AAr?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA?2?$AAi?$AAn?$AAt?$AAe?$AAl?$AAl?$AAi?$AAg?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAa?$AAr?$AAt?$AAi?$AAf@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'u', 00H, 'q', 00H, 'a', 00H, 'c', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'l', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'j', 00H, 'e', 00H, 'u', 00H, 'x', 00H
	DB	' ', 00H, 'v', 00H, 'i', 00H, 'd', 00H, 0e9H, 00H, 'o', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'u', 00H, 'c', 00H, 'k', 00H, 'l', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, '_', 00H, 'a', 00H, 'i', 00H, 's'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, '\'
	DB	00H, 'f', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'y', 00H, '\', 00H
	DB	'F', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'y', 00H, 'O', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	's', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7FzOR@@6B@
CONST	SEGMENT
??_7FzOR@@6B@ DD FLAT:??_R4FzOR@@6B@			; FzOR::`vftable'
	DD	FLAT:??_EFzOR@@UAEPAXI@Z
	DD	FLAT:?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzOR@@UBENXZ
	DD	FLAT:?ClearDOM@FzOR@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzOR@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FzAND@@6B@
CONST	SEGMENT
??_7FzAND@@6B@ DD FLAT:??_R4FzAND@@6B@			; FzAND::`vftable'
	DD	FLAT:??_EFzAND@@UAEPAXI@Z
	DD	FLAT:?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzAND@@UBENXZ
	DD	FLAT:?ClearDOM@FzAND@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzAND@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FuzzyTerm@@6B@
CONST	SEGMENT
??_7FuzzyTerm@@6B@ DD FLAT:??_R4FuzzyTerm@@6B@		; FuzzyTerm::`vftable'
	DD	FLAT:??_EFuzzyTerm@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@DDIAPGKN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
CONST	SEGMENT
??_C@_1GI@DDIAPGKN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'V', 00H
	DB	'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't', 00H
	DB	'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1
__unwindtable$?GetDOM@FzOR@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$2
__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$2
__unwindtable$?ClearDOM@FzAND@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$2
__unwindtable$?GetDOM@FzAND@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$2
__ehfuncinfo$?GetDOM@FzOR@@UBENXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetDOM@FzOR@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzOR@@QAE@ABV0@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1FzOR@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ClearDOM@FzAND@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetDOM@FzAND@@UBENXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetDOM@FzAND@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FzAND@@QAE@ABV0@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1FzAND@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??0FzOR@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$4
__unwindtable$??0FzAND@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Container_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z PROC ; std::_Debug_pointer<FuzzyTerm *>, COMDAT

; 760  : 	{	// test pointer for non-singularity, pointers

	push	ebp
	mov	ebp, esp

; 761  : 	if (_Ptr == 0)

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN1@Debug_poin

; 762  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Debug_poin:

; 763  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z ENDP ; std::_Debug_pointer<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Debug_range_ptr2@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Debug_range_ptr2@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range_ptr2<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 822  : 	{	// test iterator pair for valid range/pointer, random-access iterators

	push	ebp
	mov	ebp, esp

; 823  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Debug_rang

; 824  : 		{	// check for non-null pointers, valid range
; 825  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z ; std::_Debug_pointer<FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 826  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z ; std::_Debug_pointer<FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 827  : 		if (_Last < _First)

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 828  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:

; 829  : 		_DEBUG_POINTER2(_Ptr, _File, _Line);	// test only if used

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Debug_pointer@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@PB_WI@Z ; std::_Debug_pointer<FuzzyTerm *>
	add	esp, 12					; 0000000cH
$LN1@Debug_rang:

; 830  : 		}
; 831  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_range_ptr2@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range_ptr2<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@PAPAVFuzzyTerm@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVFuzzyTerm@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFuzzyTerm@@@Z PROC ; std::_Iter_cat<FuzzyTerm * *>, COMDAT

; 601  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 602  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 603  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 604  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAPAVFuzzyTerm@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFuzzyTerm@@@Z ENDP ; std::_Iter_cat<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Debug_range_ptr@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_range_ptr@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WI@Z PROC ; std::_Debug_range_ptr<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 837  : 	{	// test iterator pair for valid range/pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 838  : 	_Debug_range_ptr2(_First, _Last, _Ptr, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAVFuzzyTerm@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFuzzyTerm@@@Z ; std::_Iter_cat<FuzzyTerm * *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_range_ptr2@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range_ptr2<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 24					; 00000018H

; 839  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range_ptr@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WI@Z ENDP ; std::_Debug_range_ptr<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVFuzzyTerm@@PAV1@PAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVFuzzyTerm@@PAV1@PAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<FuzzyTerm *,FuzzyTerm *,FuzzyTerm *>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);

	push	469					; 000001d5H
	push	OFFSET ??_C@_1GG@BIHJGGHN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_range_ptr@PAPAVFuzzyTerm@@PAPAV1@@std@@YAXPAPAVFuzzyTerm@@0AAPAPAV1@PB_WI@Z ; std::_Debug_range_ptr<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 20					; 00000014H

; 470  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVFuzzyTerm@@PAV1@PAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<FuzzyTerm *,FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z PROC ; std::_Val_type<FuzzyTerm * *>, COMDAT

; 874  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 875  : 	return (0);

	xor	eax, eax

; 876  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ENDP ; std::_Val_type<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 447  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 448  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 449  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z PROC ; std::_Uninit_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z ; std::_Ptr_cat<FuzzyTerm *,FuzzyTerm *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Val_type<FuzzyTerm * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVFuzzyTerm@@PAV1@PAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FuzzyTerm *,FuzzyTerm *,FuzzyTerm *>
	add	esp, 24					; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ENDP ; std::_Uninit_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z PROC ; std::_Unchecked<FuzzyTerm * *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 439  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 440  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ENDP ; std::_Unchecked<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 656  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN1@construct:

; 658  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 663  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 664  : 		_Ptr->~_Uty();
; 665  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVFuzzyTerm@@PAV1@@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVFuzzyTerm@@PAV1@@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z PROC ; std::allocator<FuzzyTerm *>::construct<FuzzyTerm *,FuzzyTerm *>, COMDAT
; _this$ = ecx

; 656  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 657  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN1@construct:

; 658  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVFuzzyTerm@@PAV1@@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ENDP ; std::allocator<FuzzyTerm *>::construct<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >, COMDAT

; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 180  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z PROC ; std::_Ptr_cat<FuzzyTerm *,FuzzyTerm *>, COMDAT

; 640  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 643  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z ENDP ; std::_Ptr_cat<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z PROC ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp

; 491  : 	return (_Rechecked(_Dest,

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Uninit_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 774  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 775  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 776  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1293 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1294 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1295 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 781  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 782  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 783  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAVFuzzyTerm@@@std@@@std@@YAABV?$allocator@PAVFuzzyTerm@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAVFuzzyTerm@@@std@@@std@@YAABV?$allocator@PAVFuzzyTerm@@@0@ABV10@@Z PROC ; std::forward<std::allocator<FuzzyTerm *> const &>, COMDAT

; 1293 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1294 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1295 : 	}

	pop	ebp
	ret	0
??$forward@ABV?$allocator@PAVFuzzyTerm@@@std@@@std@@YAABV?$allocator@PAVFuzzyTerm@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<FuzzyTerm *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVFuzzyTerm@@PAV1@@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@PAPAVFuzzyTerm@@$$QAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVFuzzyTerm@@PAV1@@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@PAPAVFuzzyTerm@@$$QAPAV3@@Z PROC ; std::allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>, COMDAT

; 774  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 775  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ; std::allocator<FuzzyTerm *>::construct<FuzzyTerm *,FuzzyTerm *>

; 776  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@PAVFuzzyTerm@@PAV1@@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@PAPAVFuzzyTerm@@$$QAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<FuzzyTerm *>, COMDAT

; 691  : 	{	// return address of object _Val

	push	ebp
	mov	ebp, esp

; 692  : 	return (reinterpret_cast<_Ty *>(

	mov	eax, DWORD PTR __Val$[ebp]

; 693  : 		&const_cast<char&>(
; 694  : 		reinterpret_cast<const volatile char&>(_Val))));
; 695  : 	}

	pop	ebp
	ret	0
??$_Addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@IPAPAV1@_N@Z
_TEXT	SEGMENT
__Ptr_container$1 = -16					; size = 4
__Block_size$2 = -12					; size = 4
__User_size$ = -8					; size = 4
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
??$_Allocate@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@IPAPAV1@_N@Z PROC ; std::_Allocate<FuzzyTerm *>, COMDAT

; 54   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 55   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 56   : 
; 57   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN2@Allocate

; 58   : 		return (static_cast<_Ty *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	jmp	$LN9@Allocate
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN3@Allocate

; 62   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	DWORD PTR __User_size$[ebp], eax

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	movzx	ecx, BYTE PTR __Try_aligned_allocation$[ebp]
	test	ecx, ecx
	je	$LN4@Allocate
	cmp	DWORD PTR __User_size$[ebp], 4096	; 00001000H
	jb	$LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	mov	edx, DWORD PTR __User_size$[ebp]
	add	edx, 39					; 00000027H
	mov	DWORD PTR __Block_size$2[ebp], edx

; 72   : 		if (_Block_size <= _User_size)

	mov	eax, DWORD PTR __Block_size$2[ebp]
	cmp	eax, DWORD PTR __User_size$[ebp]
	ja	SHORT $LN6@Allocate

; 73   : 			_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN6@Allocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	mov	ecx, DWORD PTR __Block_size$2[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr_container$1[ebp], eax

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	cmp	DWORD PTR __Ptr_container$1[ebp], 0
	jne	SHORT $LN7@Allocate
	mov	edx, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN10@Allocate
	xor	eax, eax
	jne	SHORT $LN11@Allocate
$LN10@Allocate:
	push	OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	76					; 0000004cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Allocate
	int	3
$LN11@Allocate:
	push	0
	push	76					; 0000004cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN7@Allocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	mov	edx, DWORD PTR __Ptr_container$1[ebp]
	add	edx, 39					; 00000027H
	and	edx, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], edx

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

	mov	ecx, 4
	imul	edx, ecx, -2
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+edx], -84215046		; fafafafaH

; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else

	jmp	SHORT $LN5@Allocate
$LN4@Allocate:

; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

	mov	ecx, DWORD PTR __User_size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN5@Allocate
	mov	edx, OFFSET ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN12@Allocate
	xor	eax, eax
	jne	SHORT $LN13@Allocate
$LN12@Allocate:
	push	OFFSET ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	90					; 0000005aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN13@Allocate
	int	3
$LN13@Allocate:
	push	0
	push	90					; 0000005aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Allocate:

; 91   : 		}
; 92   : 	return (static_cast<_Ty *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN9@Allocate:

; 93   : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@IPAPAV1@_N@Z ENDP ; std::_Allocate<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Deallocate@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@I@Z
_TEXT	SEGMENT
__Ptr_container$1 = -16					; size = 4
__Ptr_ptr$2 = -12					; size = 4
__Ptr_user$3 = -8					; size = 4
__User_size$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Deallocate@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@I@Z PROC ; std::_Deallocate<std::_Container_proxy>, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Deallocate
	mov	eax, OFFSET ??_C@_0CG@FHBDFCGK@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5sizeof?5@
	test	eax, eax
	je	SHORT $LN10@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN11@Deallocate
$LN10@Deallocate:
	push	OFFSET ??_C@_1FK@EJGLHMGC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Deallocate
	int	3
$LN11@Deallocate:
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Deallocate:

; 101  : 	const size_t _User_size = _Count * sizeof (_Ty);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __User_size$[ebp], eax

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	DWORD PTR __User_size$[ebp], 4096	; 00001000H
	jb	$LN3@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr_user$3[ebp], ecx

; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	and	edx, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	mov	eax, OFFSET ??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@
	test	eax, eax
	je	SHORT $LN12@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN13@Deallocate
$LN12@Deallocate:
	push	OFFSET ??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	106					; 0000006aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN13@Deallocate
	int	3
$LN13@Deallocate:
	push	0
	push	106					; 0000006aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN4@Deallocate:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

	mov	eax, DWORD PTR __Ptr_user$3[ebp]
	sub	eax, 4
	mov	DWORD PTR __Ptr_ptr$2[ebp], eax

; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR __Ptr_ptr$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Ptr_container$1[ebp], edx

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr_ptr$2[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	je	SHORT $LN5@Deallocate
	mov	eax, OFFSET ??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@
	test	eax, eax
	je	SHORT $LN14@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN15@Deallocate
$LN14@Deallocate:
	push	OFFSET ??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN15@Deallocate
	int	3
$LN15@Deallocate:
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Deallocate:

; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	cmp	eax, DWORD PTR __Ptr_user$3[ebp]
	jb	SHORT $LN6@Deallocate
	mov	ecx, OFFSET ??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@
	test	ecx, ecx
	je	SHORT $LN16@Deallocate
	xor	edx, edx
	jne	SHORT $LN17@Deallocate
$LN16@Deallocate:
	push	OFFSET ??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	120					; 00000078H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN17@Deallocate
	int	3
$LN17@Deallocate:
	push	0
	push	120					; 00000078H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN6@Deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)

	mov	ecx, DWORD PTR __Ptr_user$3[ebp]
	sub	ecx, DWORD PTR __Ptr_container$1[ebp]
	cmp	ecx, 8
	jae	SHORT $LN7@Deallocate
	mov	edx, OFFSET ??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@
	test	edx, edx
	je	SHORT $LN18@Deallocate
	xor	eax, eax
	jne	SHORT $LN19@Deallocate
$LN18@Deallocate:
	push	OFFSET ??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	124					; 0000007cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Deallocate
	int	3
$LN19@Deallocate:
	push	0
	push	124					; 0000007cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN7@Deallocate:

; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)
; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	sub	edx, DWORD PTR __Ptr_container$1[ebp]
	cmp	edx, 39					; 00000027H
	jbe	SHORT $LN8@Deallocate
	mov	eax, OFFSET ??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@
	test	eax, eax
	je	SHORT $LN20@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN21@Deallocate
$LN20@Deallocate:
	push	OFFSET ??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN21@Deallocate
	int	3
$LN21@Deallocate:
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN8@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<_Ty *>(_Ptr_container);

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 139  : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Deallocate@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@I@Z ENDP ; std::_Deallocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@_N@Z
_TEXT	SEGMENT
__Ptr_container$1 = -16					; size = 4
__Block_size$2 = -12					; size = 4
__User_size$ = -8					; size = 4
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@_N@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 54   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 55   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 56   : 
; 57   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN2@Allocate

; 58   : 		return (static_cast<_Ty *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
	jmp	$LN9@Allocate
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / sizeof (_Ty) < _Count)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN3@Allocate

; 62   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 63   : 	const size_t _User_size = _Count * sizeof (_Ty);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __User_size$[ebp], eax

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	movzx	ecx, BYTE PTR __Try_aligned_allocation$[ebp]
	test	ecx, ecx
	je	$LN4@Allocate
	cmp	DWORD PTR __User_size$[ebp], 4096	; 00001000H
	jb	$LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	mov	edx, DWORD PTR __User_size$[ebp]
	add	edx, 39					; 00000027H
	mov	DWORD PTR __Block_size$2[ebp], edx

; 72   : 		if (_Block_size <= _User_size)

	mov	eax, DWORD PTR __Block_size$2[ebp]
	cmp	eax, DWORD PTR __User_size$[ebp]
	ja	SHORT $LN6@Allocate

; 73   : 			_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN6@Allocate:

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	mov	ecx, DWORD PTR __Block_size$2[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr_container$1[ebp], eax

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	cmp	DWORD PTR __Ptr_container$1[ebp], 0
	jne	SHORT $LN7@Allocate
	mov	edx, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN10@Allocate
	xor	eax, eax
	jne	SHORT $LN11@Allocate
$LN10@Allocate:
	push	OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	76					; 0000004cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Allocate
	int	3
$LN11@Allocate:
	push	0
	push	76					; 0000004cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN7@Allocate:

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	mov	edx, DWORD PTR __Ptr_container$1[ebp]
	add	edx, 39					; 00000027H
	and	edx, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], edx

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

	mov	ecx, 4
	imul	edx, ecx, -2
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+edx], -84215046		; fafafafaH

; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else

	jmp	SHORT $LN5@Allocate
$LN4@Allocate:

; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

	mov	ecx, DWORD PTR __User_size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN5@Allocate
	mov	edx, OFFSET ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
	test	edx, edx
	je	SHORT $LN12@Allocate
	xor	eax, eax
	jne	SHORT $LN13@Allocate
$LN12@Allocate:
	push	OFFSET ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	90					; 0000005aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN13@Allocate
	int	3
$LN13@Allocate:
	push	0
	push	90					; 0000005aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Allocate:

; 91   : 		}
; 92   : 	return (static_cast<_Ty *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN9@Allocate:

; 93   : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@_N@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Deallocate@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
__Ptr_container$1 = -16					; size = 4
__Ptr_ptr$2 = -12					; size = 4
__Ptr_user$3 = -8					; size = 4
__User_size$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Deallocate@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@I@Z PROC ; std::_Deallocate<FuzzyTerm *>, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / sizeof (_Ty));

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Deallocate
	mov	eax, OFFSET ??_C@_0CG@FHBDFCGK@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5sizeof?5@
	test	eax, eax
	je	SHORT $LN10@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN11@Deallocate
$LN10@Deallocate:
	push	OFFSET ??_C@_1FK@EJGLHMGC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Deallocate
	int	3
$LN11@Deallocate:
	push	0
	push	100					; 00000064H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Deallocate:

; 101  : 	const size_t _User_size = _Count * sizeof (_Ty);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	DWORD PTR __User_size$[ebp], eax

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	DWORD PTR __User_size$[ebp], 4096	; 00001000H
	jb	$LN3@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr_user$3[ebp], ecx

; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	and	edx, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	mov	eax, OFFSET ??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@
	test	eax, eax
	je	SHORT $LN12@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN13@Deallocate
$LN12@Deallocate:
	push	OFFSET ??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	106					; 0000006aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN13@Deallocate
	int	3
$LN13@Deallocate:
	push	0
	push	106					; 0000006aH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN4@Deallocate:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

	mov	eax, DWORD PTR __Ptr_user$3[ebp]
	sub	eax, 4
	mov	DWORD PTR __Ptr_ptr$2[ebp], eax

; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR __Ptr_ptr$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Ptr_container$1[ebp], edx

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr_ptr$2[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	je	SHORT $LN5@Deallocate
	mov	eax, OFFSET ??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@
	test	eax, eax
	je	SHORT $LN14@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN15@Deallocate
$LN14@Deallocate:
	push	OFFSET ??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN15@Deallocate
	int	3
$LN15@Deallocate:
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Deallocate:

; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	cmp	eax, DWORD PTR __Ptr_user$3[ebp]
	jb	SHORT $LN6@Deallocate
	mov	ecx, OFFSET ??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@
	test	ecx, ecx
	je	SHORT $LN16@Deallocate
	xor	edx, edx
	jne	SHORT $LN17@Deallocate
$LN16@Deallocate:
	push	OFFSET ??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	120					; 00000078H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN17@Deallocate
	int	3
$LN17@Deallocate:
	push	0
	push	120					; 00000078H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN6@Deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)

	mov	ecx, DWORD PTR __Ptr_user$3[ebp]
	sub	ecx, DWORD PTR __Ptr_container$1[ebp]
	cmp	ecx, 8
	jae	SHORT $LN7@Deallocate
	mov	edx, OFFSET ??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@
	test	edx, edx
	je	SHORT $LN18@Deallocate
	xor	eax, eax
	jne	SHORT $LN19@Deallocate
$LN18@Deallocate:
	push	OFFSET ??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	124					; 0000007cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Deallocate
	int	3
$LN19@Deallocate:
	push	0
	push	124					; 0000007cH
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN7@Deallocate:

; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)
; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	mov	edx, DWORD PTR __Ptr_user$3[ebp]
	sub	edx, DWORD PTR __Ptr_container$1[ebp]
	cmp	edx, 39					; 00000027H
	jbe	SHORT $LN8@Deallocate
	mov	eax, OFFSET ??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@
	test	eax, eax
	je	SHORT $LN20@Deallocate
	xor	ecx, ecx
	jne	SHORT $LN21@Deallocate
$LN20@Deallocate:
	push	OFFSET ??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN21@Deallocate
	int	3
$LN21@Deallocate:
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1GI@MOGLCDAO@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN8@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<_Ty *>(_Ptr_container);

	mov	eax, DWORD PTR __Ptr_container$1[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 139  : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Deallocate@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@I@Z ENDP ; std::_Deallocate<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >, COMDAT

; 185  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFuzzyTerm@@0@Z ; std::_Ptr_cat<FuzzyTerm *,FuzzyTerm *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
	add	esp, 16					; 00000010H

; 187  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEPAPAVFuzzyTerm@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEPAPAVFuzzyTerm@@PAPAV2@00@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove<FuzzyTerm * *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1678 : 		return (_Uninitialized_move(_First, _Last,

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
	add	esp, 16					; 00000010H

; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEPAPAVFuzzyTerm@@PAPAV2@00@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 918  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 		_Mytraits::construct(*this, _Ptr,

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 920  : 			_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 926  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 927  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 928  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>, COMDAT
; _this$ = ecx

; 629  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 876  : 		{	// construct from a related allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 875  : 		: _Mybase(_Right)

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>

; 877  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 910  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 911  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 912  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 899  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate

; 901  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 644  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  : 		return (_Allocate(_Count, (pointer)0));

	push	1
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@_N@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 646  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 639  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 		_Deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@I@Z ; std::_Deallocate<std::_Container_proxy>
	add	esp, 8

; 641  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAVFuzzyTerm@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAVFuzzyTerm@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><std::allocator<FuzzyTerm *> const &>, COMDAT
; _this$ = ecx

; 288  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABV?$allocator@PAVFuzzyTerm@@@std@@@std@@YAABV?$allocator@PAVFuzzyTerm@@@0@ABV10@@Z ; std::forward<std::allocator<FuzzyTerm *> const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::_Wrap_alloc<std::allocator<FuzzyTerm *> >

; 287  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >

; 289  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABV?$allocator@PAVFuzzyTerm@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><std::allocator<FuzzyTerm *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>, COMDAT
; _this$ = ecx

; 918  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 		_Mytraits::construct(*this, _Ptr,

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@PAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 920  : 			_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::forward<FuzzyTerm *>, COMDAT

; 1293 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1294 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1295 : 	}

	pop	ebp
	ret	0
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::forward<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
$T1 = -2						; size = 1
__Val$ = 8						; size = 4
??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::addressof<FuzzyTerm *>, COMDAT

; 699  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 700  : 	return (_Addressof(_Val, is_function<_Ty>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$_Addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ; std::_Addressof<FuzzyTerm *>
	add	esp, 8

; 701  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::addressof<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 334  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++

; 336  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 337  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 324  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 325  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*

; 326  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 306  : 		: _Mybase(_Parg, _Pvector)

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 308  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 301  : 	_Vector_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		{	// construct with null vector pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 303  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat, COMDAT
; _this$ = ecx

; 237  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN3@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN1@Compat
$LN3@Compat:

; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	241					; 000000f1H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;

	mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	eax, eax
	je	SHORT $LN5@Compat
	xor	ecx, ecx
	jne	SHORT $LN6@Compat
$LN5@Compat:
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	242					; 000000f2H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Compat
	int	3
$LN6@Compat:
	push	0
	push	242					; 000000f2H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@Compat:

; 243  : 			}
; 244  : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 212  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv82 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 		if (this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN2@operator

; 205  : 			_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
$LN2@operator:

; 206  : 		return (this->_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN4@operator
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv82[ebp], 0
$LN5@operator:
	mov	al, BYTE PTR tv82[ebp]

; 207  : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 95   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator
$LN3@operator:

; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");

	push	101					; 00000065H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 102  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	102					; 00000066H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	102					; 00000066H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 113  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 114  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 65   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@operator
$LN3@operator:

; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	push	72					; 00000048H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 73   : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN5@operator
	xor	ecx, ecx
	jne	SHORT $LN6@operator
$LN5@operator:
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@operator
	int	3
$LN6@operator:
	push	0
	push	73					; 00000049H
	push	OFFSET ??_C@_1GE@BNGOPDPB@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 87   : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 48   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 49   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with null pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ

; 41   : 		: _Ptr()

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 43   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVFuzzyTerm@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,FuzzyTerm *,int,FuzzyTerm * const *,FuzzyTerm * const &,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzOR@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzOR@@UAEPAXI@Z PROC				; FzOR::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzOR@@UAE@XZ				; FzOR::~FzOR
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzOR@@UAEPAXI@Z ENDP				; FzOR::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.h
;	COMDAT ?ORwithDOM@FzOR@@UAEXN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 8
?ORwithDOM@FzOR@@UAEXN@Z PROC				; FzOR::ORwithDOM, COMDAT
; _this$ = ecx

; 87   :   void ORwithDOM(double val){assert(0 && "<FzOR::ORwithDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ORwithDOM
	push	87					; 00000057H
	push	OFFSET ??_C@_1MM@HJBMKOFH@?$AAd?$AA?3?$AA?2?$AAc?$AAo?$AAu?$AAr?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA?2?$AAi?$AAn?$AAt?$AAe?$AAl?$AAl?$AAi?$AAg?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAa?$AAr?$AAt?$AAi?$AAf@
	push	OFFSET ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ORwithDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ORwithDOM@FzOR@@UAEXN@Z ENDP				; FzOR::ORwithDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.h
;	COMDAT ?ClearDOM@FzOR@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDOM@FzOR@@UAEXXZ PROC				; FzOR::ClearDOM, COMDAT
; _this$ = ecx

; 86   :   void ClearDOM(){assert(0 && "<FzOR::ClearDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ClearDOM
	push	86					; 00000056H
	push	OFFSET ??_C@_1MM@HJBMKOFH@?$AAd?$AA?3?$AA?2?$AAc?$AAo?$AAu?$AAr?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA?2?$AAi?$AAn?$AAt?$AAe?$AAl?$AAl?$AAi?$AAg?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAa?$AAr?$AAt?$AAi?$AAf@
	push	OFFSET ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ClearDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDOM@FzOR@@UAEXXZ ENDP				; FzOR::ClearDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv132 = -112						; size = 4
tv167 = -108						; size = 8
tv91 = -100						; size = 4
tv140 = -96						; size = 4
tv142 = -92						; size = 4
tv138 = -88						; size = 4
tv65 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_largest$ = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzOR@@UBENXZ PROC				; FzOR::GetDOM
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzOR@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 148  :   double largest = MinFloat;

	movsd	xmm0, QWORD PTR __real@3810000000000000
	movsd	QWORD PTR _largest$[ebp], xmm0

; 149  : 
; 150  :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 151  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv138[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv140[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv140[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T4[ebp]
	test	eax, eax
	je	SHORT $LN3@GetDOM

; 152  :   {
; 153  :     if ((*curTerm)->GetDOM() > largest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv167[ebp]
	movsd	xmm0, QWORD PTR tv167[ebp]
	comisd	xmm0, QWORD PTR _largest$[ebp]
	jbe	SHORT $LN5@GetDOM

; 154  :     {
; 155  :       largest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _largest$[ebp]
$LN5@GetDOM:

; 156  :     }
; 157  :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 158  : 
; 159  :   return largest;

	movsd	xmm0, QWORD PTR _largest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 160  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?GetDOM@FzOR@@UBENXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzOR@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzOR@@UBENXZ ENDP				; FzOR::GetDOM
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.h
;	COMDAT ?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ PROC			; FzOR::Clone, COMDAT
; _this$ = ecx

; 81   :   FuzzyTerm* Clone()const{return new FzOR(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzOR@@QAE@ABV0@@Z			; FzOR::FzOR
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ ENDP			; FzOR::Clone
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 125  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 126  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 127  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 128  :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 129  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 117  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 118  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 119  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 120  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzOR::FzOR
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 110  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 111  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 112  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv146 = -88						; size = 4
tv158 = -84						; size = 4
tv160 = -80						; size = 4
tv156 = -76						; size = 4
tv86 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzOR@@QAE@ABV0@@Z PROC				; FzOR::FzOR
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 100  :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 101  :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv156[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T4[ebp]
	test	ecx, ecx
	je	SHORT $LN3@FzOR

; 102  :    {
; 103  :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], edx
	mov	eax, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 104  :    }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 105  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN14@FzOR:
	DD	1
	DD	$LN13@FzOR
$LN13@FzOR:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzOR
$LN11@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$3:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0FzOR@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@ABV0@@Z ENDP				; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv147 = -76						; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 12
$T5 = -49						; size = 1
$T6 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FzOR@@UAE@XZ PROC					; FzOR::~FzOR
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FzOR@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@

; 134  :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 135  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T5[ebp]
	test	eax, eax
	je	SHORT $LN3@FzOR

; 136  :   {
; 137  :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@FzOR
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzOR
$LN6@FzOR:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzOR:

; 138  :   }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 139  : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@FzOR:
	DD	1
	DD	$LN10@FzOR
$LN10@FzOR:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@FzOR
$LN8@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1FzOR@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FzOR@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FzOR@@UAE@XZ ENDP					; FzOR::~FzOR
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzAND@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzAND@@UAEPAXI@Z PROC				; FzAND::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzAND@@UAE@XZ			; FzAND::~FzAND
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzAND@@UAEPAXI@Z ENDP				; FzAND::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv131 = -84						; size = 4
tv139 = -80						; size = 4
tv140 = -76						; size = 4
tv137 = -72						; size = 4
tv65 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_val$ = 8						; size = 8
?ORwithDOM@FzAND@@UAEXN@Z PROC				; FzAND::ORwithDOM
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 76   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 77   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ORwithDOM
$LN2@ORwithDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ORwithDOM:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv139[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	SHORT $LN3@ORwithDOM

; 78   :   {
; 79   :     (*curTerm)->ORwithDOM(val);

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], ecx
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :   }

	jmp	SHORT $LN2@ORwithDOM
$LN3@ORwithDOM:

; 81   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ORwithDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@ORwithDOM:
	DD	1
	DD	$LN11@ORwithDOM
$LN11@ORwithDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ORwithDOM
$LN9@ORwithDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ORwithDOM@FzAND@@UAEXN@Z ENDP				; FzAND::ORwithDOM
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv131 = -84						; size = 4
tv138 = -80						; size = 4
tv139 = -76						; size = 4
tv136 = -72						; size = 4
tv65 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ClearDOM@FzAND@@UAEXXZ PROC				; FzAND::ClearDOM
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClearDOM@FzAND@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 86   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 87   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ClearDOM
$LN2@ClearDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ClearDOM:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv138[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T3[ebp]
	test	eax, eax
	je	SHORT $LN3@ClearDOM

; 88   :   {
; 89   :     (*curTerm)->ClearDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], ecx
	mov	edx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   :   }

	jmp	SHORT $LN2@ClearDOM
$LN3@ClearDOM:

; 91   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ClearDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ClearDOM:
	DD	1
	DD	$LN11@ClearDOM
$LN11@ClearDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ClearDOM
$LN9@ClearDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?ClearDOM@FzAND@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClearDOM@FzAND@@UAEXXZ ENDP				; FzAND::ClearDOM
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv132 = -112						; size = 4
tv167 = -108						; size = 8
tv91 = -100						; size = 4
tv140 = -96						; size = 4
tv142 = -92						; size = 4
tv138 = -88						; size = 4
tv65 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_smallest$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzAND@@UBENXZ PROC				; FzAND::GetDOM
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzAND@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 58   :   double smallest = MaxDouble;

	movsd	xmm0, QWORD PTR __real@7fefffffffffffff
	movsd	QWORD PTR _smallest$[ebp], xmm0

; 59   : 
; 60   :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 61   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv138[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv140[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv140[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T4[ebp]
	test	eax, eax
	je	SHORT $LN3@GetDOM

; 62   :   {
; 63   :     if ((*curTerm)->GetDOM() < smallest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv167[ebp]
	movsd	xmm0, QWORD PTR _smallest$[ebp]
	comisd	xmm0, QWORD PTR tv167[ebp]
	jbe	SHORT $LN5@GetDOM

; 64   :     {
; 65   :       smallest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _smallest$[ebp]
$LN5@GetDOM:

; 66   :     }
; 67   :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 68   : 
; 69   :   return smallest;

	movsd	xmm0, QWORD PTR _smallest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 70   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?GetDOM@FzAND@@UBENXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzAND@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzAND@@UBENXZ ENDP				; FzAND::GetDOM
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.h
;	COMDAT ?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ PROC			; FzAND::Clone, COMDAT
; _this$ = ecx

; 45   :   FuzzyTerm* Clone()const{return new FzAND(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzAND@@QAE@ABV0@@Z			; FzAND::FzAND
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ ENDP			; FzAND::Clone
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 35   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 36   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 37   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 38   :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 39   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 28   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 29   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzAND::FzAND
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 20   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 21   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 22   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv146 = -88						; size = 4
tv158 = -84						; size = 4
tv160 = -80						; size = 4
tv156 = -76						; size = 4
tv86 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzAND@@QAE@ABV0@@Z PROC				; FzAND::FzAND
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 10   :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 11   :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv156[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T4[ebp]
	test	ecx, ecx
	je	SHORT $LN3@FzAND

; 12   :    {
; 13   :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], edx
	mov	eax, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 14   :    }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 15   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN14@FzAND:
	DD	1
	DD	$LN13@FzAND
$LN13@FzAND:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzAND
$LN11@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$3:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0FzAND@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@ABV0@@Z ENDP				; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
_TEXT	SEGMENT
tv147 = -76						; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 12
$T5 = -49						; size = 1
$T6 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FzAND@@UAE@XZ PROC					; FzAND::~FzAND
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FzAND@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@

; 44   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 45   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T5[ebp]
	test	eax, eax
	je	SHORT $LN3@FzAND

; 46   :   {
; 47   :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@FzAND
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzAND
$LN6@FzAND:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzAND:

; 48   :   }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 49   : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@FzAND:
	DD	1
	DD	$LN10@FzAND
$LN10@FzAND:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@FzAND
$LN8@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1FzAND@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FzAND@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FzAND@@UAE@XZ ENDP					; FzAND::~FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1794 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1795 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1796 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1797 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1798 : 			{	// test an iterator
; 1799 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1800 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1801 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1802 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1803 : 					{	// orphan the iterator
; 1804 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1805 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1806 : 					}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1807 : 			}
; 1808 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlen, COMDAT
; _this$ = ecx

; 1783 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1784 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1785 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1656 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	$LN1@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	edx, DWORD PTR [esi]
	sub	edx, DWORD PTR [eax]
	sar	edx, 2
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1663 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1664 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1665 : 			}
; 1666 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1646 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@Reserve

; 1649 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlen
$LN3@Reserve:

; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reallocate
$LN4@Reserve:

; 1651 : 			}
; 1652 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -28						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEPAPAVFuzzyTerm@@PAPAV2@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove<FuzzyTerm * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$0:

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate

; 1627 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1628 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z$1:

; 1629 : 
; 1630 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1631 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [esi]
	sar	edx, 2
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 1639 : 		this->_Myend() = _Ptr + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1640 : 		this->_Mylast() = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1641 : 		this->_Myfirst() = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], edx
$LN4@Reallocate:

; 1642 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reallocate
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBE_NPBQAVFuzzyTerm@@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBE_NPBQAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN3@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv78[ebp]

; 1617 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBE_NPBQAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
__Capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEII@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1605 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN2@Grow_to

; 1610 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN2@Grow_to:

; 1611 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1612 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEII@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy, COMDAT
; _this$ = ecx

; 1599 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >
	add	esp, 12					; 0000000cH

; 1601 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size, COMDAT
; _this$ = ecx

; 1183 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1184 : 		return (this->_Getal().max_size());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::max_size

; 1185 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size, COMDAT
; _this$ = ecx

; 1178 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1180 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1071 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1073 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1068 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1061 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1063 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1058 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1046 : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1048 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity, COMDAT
; _this$ = ecx

; 1041 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1043 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 975  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy

; 976  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
tv229 = -16						; size = 4
tv174 = -12						; size = 4
__Idx$1 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back, COMDAT
; _this$ = ecx

; 895  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 896  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z ; std::addressof<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBE_NPBQAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@push_back

; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@AAPAV1@@Z ; std::addressof<FuzzyTerm *>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	sub	esi, DWORD PTR [eax]
	sar	esi, 2
	mov	DWORD PTR __Idx$1[ebp], esi

; 899  : 			if (this->_Mylast() == this->_Myend())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@push_back

; 900  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reserve
$LN4@push_back:

; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range

; 902  : 			this->_Getal().construct(this->_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>

; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR tv174[ebp], eax
	mov	edx, DWORD PTR tv174[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR tv174[ebp]
	mov	DWORD PTR [ecx], eax

; 905  : 			}
; 906  : 		else

	jmp	SHORT $LN1@push_back
$LN2@push_back:

; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN5@push_back

; 909  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IAEXI@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Reserve
$LN5@push_back:

; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@IBEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range

; 911  : 			this->_Getal().construct(this->_Mylast(),

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>

; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR tv229[ebp], eax
	mov	ecx, DWORD PTR tv229[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR tv229[ebp]
	mov	DWORD PTR [eax], edx
$LN1@push_back:

; 914  : 			}
; 915  : 		}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 706  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 705  : 		: _Mybase()

	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >

; 707  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 318  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 319  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 320  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 313  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 315  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 298  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 300  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 293  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 295  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::~_Vector_val<std::_Simple_types<FuzzyTerm *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::~_Vector_val<std::_Simple_types<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 478  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 479  : 		{	// initialize values

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 480  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 481  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 483  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend, COMDAT
; _this$ = ecx

; 666  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 668  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend, COMDAT
; _this$ = ecx

; 661  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 663  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast, COMDAT
; _this$ = ecx

; 656  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 657  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 8

; 658  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast, COMDAT
; _this$ = ecx

; 651  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 652  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 8

; 653  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 646  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 4

; 648  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 641  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 4

; 643  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data, COMDAT
; _this$ = ecx

; 636  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 637  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second

; 638  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data, COMDAT
; _this$ = ecx

; 631  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second

; 633  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal, COMDAT
; _this$ = ecx

; 626  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 627  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 628  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal, COMDAT
; _this$ = ecx

; 621  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 623  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 611  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 613  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy, COMDAT
; _this$ = ecx

; 600  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data

; 602  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 595  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 597  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 585  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >

; 588  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 589  : 		_Alproxy.destroy(_Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate

; 591  : 		_Myproxy() = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 592  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 576  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<FuzzyTerm *> > >

; 579  : 		_Myproxy() = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 581  : 		_Myproxy()->_Mycont = &_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 582  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 551  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 552  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy

; 553  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 540  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABV?$allocator@PAVFuzzyTerm@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<FuzzyTerm *> >,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><std::allocator<FuzzyTerm *> const &>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 541  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy

; 542  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::max_size, COMDAT
; _this$ = ecx

; 931  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 932  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::allocator_traits<std::allocator<FuzzyTerm *> >::max_size
	add	esp, 4

; 933  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z PROC ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate, COMDAT
; _this$ = ecx

; 910  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 911  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate

; 912  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@I@Z PROC ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::allocate, COMDAT
; _this$ = ecx

; 899  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate

; 901  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::_Wrap_alloc<std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 859  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 858  : 		: _Mybase(_Right)

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@ABV01@@Z ; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>

; 860  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<FuzzyTerm *> >::_Wrap_alloc<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z PROC ; std::allocator_traits<std::allocator<FuzzyTerm *> >::max_size, COMDAT

; 786  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 787  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVFuzzyTerm@@@std@@QBEIXZ ; std::allocator<FuzzyTerm *>::max_size

; 788  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ENDP ; std::allocator_traits<std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVFuzzyTerm@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVFuzzyTerm@@@std@@QBEIXZ PROC	; std::allocator<FuzzyTerm *>::max_size, COMDAT
; _this$ = ecx

; 668  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 670  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVFuzzyTerm@@@std@@QBEIXZ ENDP	; std::allocator<FuzzyTerm *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::allocate, COMDAT
; _this$ = ecx

; 644  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  : 		return (_Allocate(_Count, (pointer)0));

	push	1
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@IPAPAV1@_N@Z ; std::_Allocate<FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 646  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::deallocate, COMDAT
; _this$ = ecx

; 639  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 		_Deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@PAVFuzzyTerm@@@std@@YAXPAPAVFuzzyTerm@@I@Z ; std::_Deallocate<FuzzyTerm *>
	add	esp, 8

; 641  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXPAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVFuzzyTerm@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@ABV01@@Z PROC	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 623  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 624  : 		{	// construct by copying (do nothing)
; 625  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ PROC		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 619  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 620  : 		{	// construct default allocator (do nothing)
; 621  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ENDP		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFuzzyTerm@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFuzzyTerm@@UAEPAXI@Z PROC				; FuzzyTerm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFuzzyTerm@@UAEPAXI@Z ENDP				; FuzzyTerm::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0FuzzyTerm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FuzzyTerm@@QAE@XZ PROC				; FuzzyTerm::FuzzyTerm, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FuzzyTerm@@QAE@XZ ENDP				; FuzzyTerm::FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyterm.h
;	COMDAT ??1FuzzyTerm@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FuzzyTerm@@UAE@XZ PROC				; FuzzyTerm::~FuzzyTerm, COMDAT
; _this$ = ecx

; 17   :   virtual ~FuzzyTerm(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1FuzzyTerm@@UAE@XZ ENDP				; FuzzyTerm::~FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\mini_projet_raven\common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\mini_projet_raven\common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\mini_projet_raven\common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\mini_projet_raven\common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\mini_projet_raven\common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 192  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 193  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 194  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_me

; 195  : 			{	// adopted, remove self from list
; 196  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN2@Orphan_me:

; 197  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN3@Orphan_me

; 198  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 199  : 
; 200  : 			if (*_Pnext == 0)

	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN5@Orphan_me

; 201  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	201					; 000000c9H
	push	OFFSET ??_C@_1GI@DDIAPGKN@?$AAD?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA1?$AA4?$AA?4?$AA0?$AA?2@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN5@Orphan_me:

; 202  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 203  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Orphan_me:

; 204  : 			}
; 205  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 206  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 187  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 189  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 182  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 184  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 177  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 179  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 148  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		if (_Parent == 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 150  : 			{	// no future parent, just disown current parent
; 151  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 152  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 154  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 155  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 156  : 		else

	jmp	SHORT $LN1@Adopt
$LN2@Adopt:

; 157  : 			{	// have a parent, do adoption
; 158  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 159  : 
; 160  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 161  : 			if (_Myproxy != _Parent_proxy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN1@Adopt

; 162  : 				{	// change parentage
; 163  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 164  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 165  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 166  : 				_Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 167  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 168  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN1@Adopt:

; 169  : 
; 170  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 171  : 			_Myproxy = _Parent_proxy;
; 172  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 173  : 			}
; 174  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@Adopt:
	DD	2
	DD	$LN11@Adopt
$LN11@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN9@Adopt
$LN9@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN8@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 140  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 143  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 145  : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 124  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		if (_Myproxy == _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@operator
	jmp	SHORT $LN3@operator
$LN2@operator:

; 126  : 			;
; 127  : 		else if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@operator

; 128  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 129  : 		else

	jmp	SHORT $LN3@operator
$LN4@operator:

; 130  : 			{	// becoming invalid, disown current parent
; 131  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 132  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 133  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 134  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 135  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:

; 136  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 137  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@operator:
	DD	1
	DD	$LN10@operator
$LN10@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@operator
$LN8@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
	lea	ecx, DWORD PTR __Lock$2[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		: _Myproxy(0), _Mynextiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 115  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -20						; size = 4
__Lock$2 = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 221  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = 0;

	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 224  : 		}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN1@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 99   : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 101  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Container_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 96   : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Container_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Container_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 		: _Myproxy(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		: _Mycont(0), _Myfirstiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 69   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

	push	ebp
	mov	ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 90   :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 1156 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1157 : 		return (_DBL_MAX);

	fld	QWORD PTR __real@7fefffffffffffff

; 1158 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 1151 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1152 : 		return (_DBL_MIN);

	fld	QWORD PTR __real@0010000000000000

; 1153 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 1093 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1094 : 		return (_FLT_MAX);

	fld	DWORD PTR __real@7f7fffff

; 1095 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 1088 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1089 : 		return (_FLT_MIN);

	fld	DWORD PTR __real@00800000

; 1090 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\microsoft visual studio 14.0\vc\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 685  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 686  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 687  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\cours\uqac\intelligence artificielle - jeux vidéos\buckland_aisource\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
